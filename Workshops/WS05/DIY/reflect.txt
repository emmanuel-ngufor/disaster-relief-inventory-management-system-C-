This workshop demonstrated operator overloading, a key feature in C++ which allows us to define custom behaviors for operators, such as +, -, <<, >>, and type conversions. In this workshop, operator overloading was used to provide meaningful operations for the class object, like adding and subtracting values, casting to different types, and shifting investments.
Also, Type conversion operators (such as operator double(), operator const char*(), operator char(), and operator bool()) allow objects of one type to be treated as another type. This feature helps in making the user-defined classes more versatile, allowing it to be used in different contexts.
This workshop provided me with the opportuinity to learn both member and non-member operator overloads. Member operators are defined within the class and work on class objects. Non-member operators are standalone functions that operate 
on objects without being part of the class. Both approaches have their use cases, and this workshop demonstrated how to implement both.
Also, Error handling was integrated into operator overloads. For instance, when adding or subtracting values in this workshop, checks for conditions where the operation should be omitted, such as when the Portfolio doesn't evaluate to true or when the value is negative. This is good practice to ensure data consistency and accuracy.

Overall, I would say this workshop was pretty cool..The basis on which the workshop was prepared which were a Flight Module and a Portfolio Investment Module makes so much sense in real life. I was able to implement function that reflect real life scenarios. When coding, I was basically vocalizing out what I wanted to happen in order to get the right output. For example deducting/adding fuel or passengers from one Flight to another makes so much sense. Validating if space is available and all that was fun. 
The operators and conversions implemented in the context of a financial portfolio allowed me to interact with Portfolio objects in a way that makes sense for financial calculations, such as adding or subtracting investments, checking for the type of investment, and displaying the portfolio status.

I think I am beginning to enjoy C++. I will end with the statement "Avoid Membership fees: Where possible, prefer making functions non-members non-friends" Sutter, Alexandrescu, 2005.