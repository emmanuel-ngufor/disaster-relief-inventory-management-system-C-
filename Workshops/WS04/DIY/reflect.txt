In this workshop, I learnt how to create default and overloaded constructors. A constructor is a function which has the same name as the class and is automatically called when an object of the class is created. This workshop showed how to implement constructors with no paramters as well as constructors which receive parameters also known as overloaded constructors. This augmented my understanding polymorphism in C++. Also, in this workshop, I created destructors. Destructors begin with a tilde (~) character and also bare the exact same name as the class and have to return type. However, unlike constructors, destructors do not receive no paramters. Destructors are meant for deallocating memory previously allocated before our objects go out of scope. This helps us to effectively control memory usage and avoid memory leaks.

Furthermore, I learnt how to initialize class member variables. This is a good programming practice since it provides us with the opportuinity to set member variables to a safe empty state so as to avoid gabbage values and also provides a platform for us to validate user input before initializing it to the member variables of a class. This workshop was also an opportuinity to learn how to release member pointers. It is also worth mentioning that returning void in C++ appears to be a waste of resources. So, the professor suggested we return a reference of the current object by dereferencing the "this" keyword (return *this). One thing that also stood out was the concept that functions whose paramters have default values should be placed to right most part of the function declaration and this should be done in the header files. I remember putting them in the implementation file and getting an error message from the compiler.

I would say the LAB part of this workshop was relatively easy to as compared to the DIY part. With the DIY parts, as the name suggest, little or no information is provided and we have to do a lot of research to get the recommemded output. I did face difficulties with the Label Module. The implemention of the readlabel() and printLabel() functions which return cin and cout respectively was not made clear to us. I was not told how to implement functions which return a reference of istream& and ostream&. This made it more difficult for me.  