-Upon completion of this workshop, I learnt how to define a class type and privitize data within a class type. I was able to define a class type using the "class" keyword. Also, I learnt that access specifers such as private set all subsequent declarations under it as inaccessible whereas the public access specifier sets all subsequent declarations after it as accessible. This workshop also enabled me to understand that user defined compound type such as the struct is public by default meanwhile the class compound type is private by default. Also how to use standard library facilities to format data inserted into the output stream and to dynamically allocate and deallocate memory within a class.

-I was able to instantiate objects of a class type. The Train example enable be realize we can have multiple instances of a class. It is worth mentioning that, I learnt that data members of a class should be private and member functions should be public. Member functions have direct access to the data members of the same class. We use the member functions to define the logic that operates on the data members. 
-Again, I learnt that, member functions can be of three types: Queries which reports that state of an object without changing it, modifiers which change the state of an object and specials which create, assign and destroy an object.
Last but the least, I learnt about constructors and destructors in C++ which augmented the whole concept of encapsulation. Contructors are member functions which bare the same name as the class, have no return type and can recieve parameters. Constructors are invoked at the creation of an object. The help us the initialize our data members. On the other hand, destructors are member functions which are invoked when the object goes out of scope. They typically include memory deallocation mechanisms. A destructor bares the same name as the class but prefixed with a tilde(~) and cannot be overloaded nor have a return type.

Overall, unlike the previous workshop, I was able to augment my understanding of the concept of encapsulation which enhances data hiding. We hide the implementation our our program from the client's code. 
The workshop covered a lot of important areas. However, I did struggle with the transfers function in the DIY part of this workshop. The logic was complicated as it entailed many conditions to be enforced to produce the required output.
 